// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DaroAdSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AVKit
import AdSupport
import AppTrackingTransparency
import CoreGraphics
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
public enum DaroAdError : Swift.Error, Foundation.LocalizedError {
  case UNKNOWN
  case NETWORK_ERROR
  case NO_FILL
  case TIMEOUT
  case INTERNAL_ERROR
  public var errorDescription: Swift.String? {
    get
  }
  public static func == (a: DaroAdSDK.DaroAdError, b: DaroAdSDK.DaroAdError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension DaroAdSDK.DaroAdError {
  public static var invalidRequest: DaroAdSDK.DaroAdError {
    get
  }
  public static var invalidResponse: DaroAdSDK.DaroAdError {
    get
  }
  public static var noBids: DaroAdSDK.DaroAdError {
    get
  }
  public static var alreadyLoading: DaroAdSDK.DaroAdError {
    get
  }
  public static func networkError(_ message: Swift.String) -> DaroAdSDK.DaroAdError
}
public enum DaroBannerType {
  case BANNER
  case MREC
  public var size: CoreFoundation.CGSize {
    get
  }
  public static func == (a: DaroAdSDK.DaroBannerType, b: DaroAdSDK.DaroBannerType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol DaroAdListener : AnyObject {
  func onAdFetchSucceeded()
  func onAdFetchFailed(code: DaroAdSDK.DaroAdError)
  func onAdClick()
  func onAdClosed()
  func onAdImpression()
}
extension DaroAdSDK.DaroAdListener {
  public func onAdFetchSucceeded()
  public func onAdFetchFailed(code: DaroAdSDK.DaroAdError)
  public func onAdClick()
  public func onAdClosed()
  public func onAdImpression()
}
public enum ViewabilityCalculator {
  public static func calculateVisiblePercentage(of view: UIKit.UIView) -> CoreFoundation.CGFloat
  public static func isVisible(_ view: UIKit.UIView, threshold: CoreFoundation.CGFloat = 0.5) -> Swift.Bool
}
public enum DaroLogLevel : Swift.UInt8 {
  case info
  case debug
  case error
  case fault
  case warning
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct DaroLogger {
  public static func setLogLevel(_ level: DaroAdSDK.DaroLogLevel)
  public static func info(_ message: Swift.String)
  public static func debug(_ message: Swift.String)
  public static func error(_ message: Swift.String)
  public static func fault(_ message: Swift.String)
  public static func warning(_ message: Swift.String)
  public static func devLog(_ message: Swift.String)
}
@_hasMissingDesignatedInitializers final public class DaroSdk {
  final public let VERSION: Swift.String
  public static let shared: DaroAdSDK.DaroSdk
  final public func initilized(apiKey: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DaroNativeAd {
  final public let headLine: Swift.String
  final public let body: Swift.String?
  final public let ctaText: Swift.String?
  final public let advertiser: Swift.String?
  final public let rating: Swift.Double?
  final public let price: Swift.String?
  final public let store: Swift.String?
  final public let icon: DaroAdSDK.DaroNativeImage?
  final public let mainImage: DaroAdSDK.DaroNativeImage?
  final public let media: DaroAdSDK.DaroNativeMedia?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DaroNativeMedia {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DaroNativeImage {
  final public let imageUri: Swift.String
  public var url: Foundation.URL? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DaroNativeAdLoader {
  public class Builder {
    public init(adUnitId: Swift.String)
    @discardableResult
    public func withAdListener(_ adListener: any DaroAdSDK.DaroAdListener) -> DaroAdSDK.DaroNativeAdLoader.Builder
    @discardableResult
    public func forNativeAd(_ callback: @escaping (DaroAdSDK.DaroNativeAd) -> Swift.Void) -> DaroAdSDK.DaroNativeAdLoader.Builder
    public func build() -> DaroAdSDK.DaroNativeAdLoader
    @objc deinit
  }
  public func loadAd()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor public class DaroNativeAdView : UIKit.UIView {
  @_Concurrency.MainActor public var headlineLabel: UIKit.UILabel?
  @_Concurrency.MainActor public var bodyLabel: UIKit.UILabel?
  @_Concurrency.MainActor public var ctaButton: UIKit.UIButton?
  @_Concurrency.MainActor public var advertiserLabel: UIKit.UILabel?
  @_Concurrency.MainActor public var ratingView: UIKit.UIView?
  @_Concurrency.MainActor public var priceLabel: UIKit.UILabel?
  @_Concurrency.MainActor public var storeLabel: UIKit.UILabel?
  @_Concurrency.MainActor public var iconImageView: UIKit.UIImageView?
  @_Concurrency.MainActor public var mainImageView: UIKit.UIImageView?
  @_Concurrency.MainActor public var mediaView: UIKit.UIView?
  @_Concurrency.MainActor @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor public func setNativeAd(_ ad: DaroAdSDK.DaroNativeAd)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class DaroBannerAdView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc convenience dynamic public init()
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func setAdListener(_ listener: any DaroAdSDK.DaroAdListener)
  @_Concurrency.MainActor @preconcurrency public func loadAd(_ adUnitId: Swift.String, _ adType: DaroAdSDK.DaroBannerType)
}
extension DaroAdSDK.DaroBannerAdView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToWindow()
}
@objc @_hasMissingDesignatedInitializers public class DaroInterstitialAd : ObjectiveC.NSObject {
  public func setAdListener(_ listener: (any DaroAdSDK.DaroAdListener)?)
  public func show(from viewController: UIKit.UIViewController)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DaroInterstitialAdLoader {
  @objc deinit
  convenience public init(viewController: UIKit.UIViewController? = nil, adUnitId: Swift.String, adListener: (any DaroAdSDK.DaroAdListener)? = nil)
  public func loadAd(onLoaded: @escaping (DaroAdSDK.DaroInterstitialAd) -> Swift.Void = { _ in })
  public func loadAdAsync() async throws -> DaroAdSDK.DaroInterstitialAd
  public func show(from viewController: UIKit.UIViewController? = nil)
}
extension DaroAdSDK.DaroAdError : Swift.Equatable {}
extension DaroAdSDK.DaroAdError : Swift.Hashable {}
extension DaroAdSDK.DaroBannerType : Swift.Equatable {}
extension DaroAdSDK.DaroBannerType : Swift.Hashable {}
extension DaroAdSDK.DaroLogLevel : Swift.Equatable {}
extension DaroAdSDK.DaroLogLevel : Swift.Hashable {}
extension DaroAdSDK.DaroLogLevel : Swift.RawRepresentable {}
